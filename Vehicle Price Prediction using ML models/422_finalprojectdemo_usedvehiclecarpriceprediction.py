# -*- coding: utf-8 -*-
"""422_finalprojectdemo_UsedVehicleCarPricePrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XS3PTh2Iq6Hz5PdEnYJXZ7DDoUVOmtzx
"""

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score



vehicle_data = pd.read_csv('/content/car_data.csv')


numerical = [
    'Year',
    'Kms_Driven',
    'Selling_Price',
    'Present_Price',
    'Owner',
]

categorical = [
    'Car_Name',
    'Fuel_Type',
    'Seller_Type',
    'Transmission',
    
]

vehicle_data.head()

vehicle_data.info

vehicle_data.describe()

vehicle_data.isnull().sum()

# Finding age of each car and replacing with year
vehicle_data['Age'] = 2022 - vehicle_data['Year']
vehicle_data.drop('Year',axis=1,inplace = True)

vehicle_data.head()

vehicle_data.columns

# checking the distribution of categorical data
print(vehicle_data.Fuel_Type.value_counts())
print(vehicle_data.Seller_Type.value_counts())
print(vehicle_data.Transmission.value_counts())
print(vehicle_data.Owner.value_counts())

vehicle_data.corr()

##Heatmap
correlations = vehicle_data.corr()
index=correlations.index
plt.figure(figsize=(15,9))
sns.heatmap(vehicle_data[index].corr(),annot=True,cmap="YlGnBu")

vehicle_data = vehicle_data.replace('Petrol',0)
vehicle_data = vehicle_data.replace('Diesel',1)
vehicle_data = vehicle_data.replace('CNG',2)


vehicle_data = vehicle_data.replace('Dealer',0)
vehicle_data = vehicle_data.replace('Individual',1)



vehicle_data = vehicle_data.replace('Manual',0)
vehicle_data = vehicle_data.replace('Automatic',1)

vehicle_data.head()

"""Defining some metrics:



R2 score:- The r2 score is a very important metric that is used to evaluate the performance of a regression-based machine learning model. It is pronounced as R squared and is also known as the coefficient of determination. It works by measuring the amount of variance in the predictions explained by the dataset.It basically tells us how well our model fits in the dataset. A good value of r2 score varies from dataset to dataset.

Mean Absolute Percentage Error(MAPE):- 


        mape = np.mean(np.abs((Y_actual - Y_Predicted)/Y_actual))*100
    
"""

# Splitting Input and Output
X = vehicle_data.drop(['Car_Name','Selling_Price'],axis=1)
Y = vehicle_data['Selling_Price']

# Splitting Training and Testing
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.10, random_state=2)

model=LinearRegression()
model.fit(X_train, Y_train)

from sklearn.metrics import r2_score

train_prediction=model.predict(X_train)
error = r2_score(Y_train, train_prediction)
print("R squared score:",error )

plt.scatter(Y_train, train_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title(" Actual Prices vs Predicted Prices for Training")
plt.show()

from sklearn.metrics import r2_score

test_prediction=model.predict(X_test)
error = r2_score(Y_test, test_prediction)
print("R squared score:",error )

plt.scatter(Y_test, test_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title(" Actual Prices vs Predicted Prices for Testing")
plt.show()

from sklearn.metrics import mean_absolute_error

prediction=model.predict(X_test)
from sklearn.metrics import mean_absolute_error

MAPE = mean_absolute_error(Y_test, prediction)*100
# accuracy=100-MAPE
print(MAPE)

#Lasso Regression starts here

from sklearn.linear_model import Lasso

lass_reg_model = Lasso()
lass_reg_model.fit(X_train,Y_train)

training_data_prediction = lass_reg_model.predict(X_train)
error_score = r2_score(Y_train, training_data_prediction)
print("R squared Score for train: ", error_score)

test_data_prediction = lass_reg_model.predict(X_test)
error_score = r2_score(Y_test, test_data_prediction)
print("R squared Score for test : ", error_score)

MAPE = mean_absolute_error(Y_test, test_data_prediction)*100
print(MAPE)

#Polynomial Regression Starts here

from sklearn.preprocessing import PolynomialFeatures

poly = PolynomialFeatures(degree = 2)
x_poly = poly.fit_transform(X_train)
model.fit(x_poly,Y_train)

predict1=model.predict(x_poly)


error = r2_score(Y_train, predict1)
print("R squared score for degree 2:",error )

MAPE = mean_absolute_error(Y_train, predict1)*100
accuracy=100-MAPE
print("MAPE based accuracy for degree 2 =",accuracy)

plt.scatter(Y_train, predict1)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title(" Actual Prices vs Predicted Prices")
plt.show()

##################################################
poly = PolynomialFeatures(degree = 3)
x_poly = poly.fit_transform(X_train)
model.fit(x_poly,Y_train)

predict1=model.predict(x_poly)

error = r2_score(Y_train, predict1)
print("R squared score for degree 3:",error )

MAPE = mean_absolute_error(Y_train, predict1)*100
accuracy=100-MAPE
print("MAPE based accuracy for degree 3 =",accuracy)

plt.scatter(Y_train, predict1)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title(" Actual Prices vs Predicted Prices")
plt.show()

#Decision Tree Regression starts here

from sklearn.tree import DecisionTreeRegressor

dt = DecisionTreeRegressor(random_state=0)
dt.fit(X_train,Y_train)

predictions=dt.predict(X_test)

error = r2_score(Y_test, predictions)
print("R squared score :",error )

train_acc=dt.score(X_train,Y_train)
test_acc=dt.score(X_test,Y_test)
print('Training Accuracy: ',round(train_acc*100, 2),'%')
print('Testing Accuracy: ',round(test_acc*100, 2),'%')



MAPE = mean_absolute_error(Y_test, predictions)*100
accuracy=100-MAPE
print("MAPE based accuracy =",accuracy)

plt.scatter(Y_test, predictions)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title(" Actual Prices vs Predicted Prices for Testing")
plt.show()

#Random Forest Regression starts here

from sklearn.ensemble import RandomForestRegressor

random_forest_regressor=RandomForestRegressor()
random_forest_regressor.fit(X_train,Y_train)

RandomForestRegressor()

error = r2_score(Y_test, predictions)
print("R squared score :",error )

train_acc=random_forest_regressor.score(X_train,Y_train)
test_acc=random_forest_regressor.score(X_test,Y_test)
print('Training Accuracy: ',round(train_acc*100, 2),'%')
print('Testing Accuracy: ',round(test_acc*100, 2),'%')

predictions=random_forest_regressor.predict(X_test)


MAPE = mean_absolute_error(Y_test, predictions)*100

accuracy=100-MAPE
print("MAPE based accuracy =",accuracy)


plt.scatter(Y_test, predictions)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title(" Actual Prices vs Predicted Prices for Testing")
plt.show()